@using RestaurantQRSystem.Models.Enums
@model IEnumerable<RestaurantQRSystem.Models.Order>
@{
    ViewData["Title"] = "Siparişler";
    Layout = "_AdminLayout";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Siparişler</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="Home" asp-action="Index">Dashboard</a></li>
        <li class="breadcrumb-item active">Siparişler</li>
    </ol>

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Tüm Siparişler
        </div>
        <div class="card-body">
            <table id="ordersTable" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Sipariş No</th>
                        <th>Masa</th>
                        <th>Tarih/Saat</th>
                        <th>Müşteri</th>
                        <th>Tutar</th>
                        <th>Durum</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model)
                    {
                        <tr data-id="@order.Id">
                            <td>@order.Id</td>
                            <td>@order.Table.Id - @order.Table.Name</td>
                            <td>@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</td>
                            <td>@(string.IsNullOrEmpty(order.CustomerName) ? "Misafir" : order.CustomerName)</td>
                            <td>@order.TotalAmount.ToString("0.00")₺</td>
                            <td>
                                <span class="badge bg-@(order.Status == OrderStatus.Received ? "primary" :
                                                       order.Status == OrderStatus.Preparing ? "warning" :
                                                       order.Status == OrderStatus.Ready ? "success" :
                                                       order.Status == OrderStatus.Delivered ? "info" :
                                                       order.Status == OrderStatus.Cancelled ? "danger" : "secondary")">
                                    @order.Status.ToString()
                                </span>
                            </td>
                            <td>
                                <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-primary">
                                    <i class="fas fa-eye"></i> Detay
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // DataTable
            $('#ordersTable').DataTable({
                order: [[2, 'desc']] // Tarihe göre sırala
            });

            // SignalR bağlantısı
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/orderHub")
                .withAutomaticReconnect()
                .build();

            connection.start().then(function() {
                console.log("SignalR Connected!");
                // Admin grubuna katıl
                connection.invoke("JoinAdminGroup").catch(function(err) {
                    console.error(err);
                });
            }).catch(function(err) {
                console.error(err);
            });

            // Yeni sipariş bildirimi
            connection.on("ReceiveNewOrder", function(order) {
                // Sesli bildirim
                playNotificationSound();

                // Desktop bildirim göster
                showNotification("Yeni Sipariş", `Masa ${order.Table.name}: ${order.totalAmount.toFixed(2)}₺`);

                // Tabloyu yenile
                setTimeout(function() {
                    location.reload();
                }, 2000);
            });

            // Sipariş durumu güncelleme
            connection.on("OrderStatusUpdated", function(orderId, status) {
                $(`tr[data-id='${orderId}'] td:nth-child(6) span`).removeClass().addClass(`badge bg-${getStatusColor(status)}`).text(status);
            });

            function getStatusColor(status) {
                switch(status) {
                    case "Received": return "primary";
                    case "Preparing": return "warning";
                    case "Ready": return "success";
                    case "Delivered": return "info";
                    case "Cancelled": return "danger";
                    default: return "secondary";
                }
            }

            function playNotificationSound() {
                // Ses dosyası
                const audio = new Audio('/sounds/notification.mp3');
                audio.play();
            }

            function showNotification(title, body) {
                if (!("Notification" in window)) {
                    return;
                }

                if (Notification.permission === "granted") {
                    const notification = new Notification(title, { body: body, icon: '/images/logo.png' });
                }
                else if (Notification.permission !== "denied") {
                    Notification.requestPermission().then(function(permission) {
                        if (permission === "granted") {
                            const notification = new Notification(title, { body: body, icon: '/images/logo.png' });
                        }
                    });
                }
            }

            // Detay sayfası için status change işlevi
            $("#status").change(function() {
                $("#statusForm").submit();
            });

            // Yazdırma işlevi
            window.printContent = function() {
                const printContents = document.getElementById("printArea")?.innerHTML;
                if (!printContents) return;

                const originalContents = document.body.innerHTML;

                document.body.innerHTML = `
                    <html>
                    <head>
                        <title>Sipariş</title>
                        <style>
                            body { font-family: Arial, sans-serif; font-size: 12px; }
                            .text-center { text-align: center; }
                            .text-end { text-align: right; }
                            table { width: 100%; border-collapse: collapse; }
                            th, td { padding: 5px; }
                            th { border-bottom: 1px solid #ddd; }
                            .table-sm th, .table-sm td { padding: 3px; }
                        </style>
                    </head>
                    <body>
                        ${printContents}
                    </body>
                    </html>
                `;

                window.print();
                document.body.innerHTML = originalContents;
                location.reload();
            };
        });
    </script>
}