<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Admin Panel</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/admin.css" asp-append-version="true" />
    
</head>
<body>
    <!-- Navbar başlangıcı -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
        <div class="container-fluid">
            <a class="navbar-brand" href="/Admin/Dashboard">Admin Paneli</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#adminNavbar" aria-controls="adminNavbar" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="adminNavbar">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" asp-area="Admin" asp-controller="Category" asp-action="Index">
                            <i class="fas fa-tags me-1"></i> Kategoriler
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-area="Admin" asp-controller="Product" asp-action="Index">
                            <i class="fas fa-utensils me-1"></i> Ürünler
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-area="Admin" asp-controller="Order" asp-action="Index">
                            <i class="fas fa-clipboard-list me-1"></i> Siparişler
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" asp-area="Admin" asp-controller="Table" asp-action="Index">
                            <i class="fas fa-chair me-1"></i> Masalar
                        </a>
                    </li>
                    
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="reportsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-chart-line me-1"></i> Detaylı Raporlar
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="reportsDropdown">
                            <li>
                                <a class="dropdown-item" asp-area="Admin" asp-controller="Report" asp-action="Index">
                                    <i class="fas fa-chart-bar me-1"></i> Satış Raporu
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" asp-area="Admin" asp-controller="Report" asp-action="DailySales">
                                    <i class="fas fa-calendar-alt me-1"></i> Günlük Satışlar
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" asp-area="Admin" asp-controller="Report" asp-action="Expenses">
                                    <i class="fas fa-money-bill-wave me-1"></i> Gider Yönetimi
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
                <partial name="../../Views/Shared/_LoginPartial" />
            </div>
        </div>
    </nav>
    <!-- Navbar bitişi -->

    <!-- Bildirim kutusu ve navbar burada olabilir -->
    <!-- Bildirim kutusu başlangıcı -->
    <ul>
        <li class="nav-item dropdown">
            <a class="nav-link" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-bell"></i>
                <span class="position-absolute top-0 start-0 translate-middle badge rounded-pill bg-danger">
                    0
                    <span class="visually-hidden">okunmamış bildirim</span>
                </span>
            </a>
            <ul class="dropdown-menu dropdown-menu-lg-start notification-dropdown" aria-labelledby="notificationDropdown">
                <li class="dropdown-header">Bildirimler</li>
                <li><hr class="dropdown-divider"></li>
                <li class="notification-empty text-center p-3">Bildirim bulunmuyor</li>
            </ul>
        </li>
    </ul>


    <div class="container-fluid p-4">
        @RenderBody()
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // Bildirim geçmişi
        const notificationList = [];

        // Dinamik menü güncelle
        function updateNotificationMenu() {
            const badge = document.querySelector('#notificationDropdown .badge');
            const list = document.querySelector('.notification-dropdown');

            if (badge) {
                const unreadCount = notificationList.length;
                badge.textContent = unreadCount;
                badge.style.display = unreadCount > 0 ? 'inline-block' : 'none';
            }

            if (list) {
                // Mevcut bildirimleri temizle, başlık dışında
                const header = list.querySelector('.dropdown-header');
                const emptyNotification = list.querySelector('.notification-empty');

                // Tüm bildirim öğelerini temizle
                const items = list.querySelectorAll('.notification-item');
                items.forEach(item => item.remove());

                if (notificationList.length === 0) {
                    // Bildirim yoksa boş mesajı göster
                    if (emptyNotification) {
                        emptyNotification.style.display = 'block';
                    }
                } else {
                    // Bildirim varsa boş mesajı gizle
                    if (emptyNotification) {
                        emptyNotification.style.display = 'none';
                    }

                    // Bildirimleri ekle
                    notificationList.slice(0, 10).forEach(notification => {
                        const notificationItem = document.createElement('li');
                        notificationItem.className = 'notification-item';
                        notificationItem.innerHTML = `
                            <a href="/Admin/Order/Details/${notification.orderId}" class="dropdown-item">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>Masa ${notification.tableName}</strong>: ${notification.totalAmount.toFixed(2)}₺
                                    </div>
                                    <div class="notification-time">${notification.formattedDate}</div>
                                </div>
                            </a>
                        `;

                        // Başlıktan sonra ekle
                        if (header) {
                            list.insertBefore(notificationItem, header.nextSibling);
                        } else {
                            list.appendChild(notificationItem);
                        }
                    });

                    // Temizleme butonu ekle
                    const clearButton = document.createElement('li');
                    clearButton.innerHTML = `
                        <div class="dropdown-divider"></div>
                        <a href="#" class="dropdown-item text-center text-danger" onclick="clearNotifications(); return false;">
                            Tümünü Temizle
                        </a>
                    `;
                    list.appendChild(clearButton);
                }
            }
        }

        // Bildirimleri temizle
        function clearNotifications() {
            notificationList.length = 0;
            updateNotificationMenu();
        }

        // Sesli bildirim çal
        function playNotificationSound() {
            const audio = new Audio('/ses/havaliman.mp3');
            audio.play().catch(error => console.warn('Ses çalınamadı:', error));
        }

        // Yeni sipariş bildirimi göster
        function showNewOrderNotification(order) {
            console.log('Yeni sipariş bildirimi:', order);

            // Bildirim listesine ekle
            notificationList.unshift({
                orderId: order.orderId,
                tableName: order.tableName,
                totalAmount: order.totalAmount,
                formattedDate: order.formattedDate || new Date().toLocaleTimeString()
            });

            // Menüyü güncelle
            updateNotificationMenu();

            // Sesli bildirim
            playNotificationSound();

            // Masaüstü bildirimi (opsiyonel)
            if (Notification.permission === 'granted') {
                new Notification('Yeni Sipariş', {
                    body: `Masa ${order.tableName}: ${order.totalAmount.toFixed(2)}₺`,
                    icon: '/images/logo.png'
                });
            }

            // Ekranda geçici bildirim göster
            const notification = document.createElement('div');
            notification.className = 'alert alert-success alert-dismissible fade show position-fixed top-0 start-0 m-3';
            notification.style.zIndex = '9999';
            notification.innerHTML = `
                <h5>Yeni Sipariş</h5>
                <p>Masa: <strong>${order.tableName}</strong><br>
                Tutar: <strong>${order.totalAmount.toFixed(2)}₺</strong></p>
                <a href="/Admin/Order/Details/${order.orderId}" class="btn btn-sm btn-primary">Detayları Gör</a>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.body.appendChild(notification);

            // Belirli bir süre sonra bildirimi kaldır
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 500);
            }, 10000);
        }

        // SignalR bağlantısı
        document.addEventListener('DOMContentLoaded', function() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/orderHub")
                .withAutomaticReconnect()
                .build();

            // Admin grubuna katıl
            connection.start()
                .then(() => {
                    console.log("SignalR Connected!");
                    return connection.invoke("JoinAdminGroup");
                })
                .then(() => {
                    console.log("Joined Admin group");
                })
                .catch(err => console.error("SignalR Error:", err));

            // Yeni sipariş olayını dinle
            connection.on("ReceiveNewOrder", function(order) {
                console.log("Yeni sipariş alındı:", order);
                showNewOrderNotification(order);
                 refreshTablesSection();
            });
                function refreshTablesSection() {
            const tablesContainer = document.getElementById('tables-container');

            // Yükleniyor göstergesi
            tablesContainer.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Masalar yükleniyor...</span>
                    </div>
                </div>
            `;

            // AJAX ile masa listesini getir
            fetch('/Admin/Dashboard/GetTablesList')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Masa listesi alınamadı');
                    }
                    return response.text();
                })
                .then(html => {
                    // Masa bölümünü güncelle
                    tablesContainer.innerHTML = html;

                    // Masa detay linklerini tekrar bağla
                    attachTableDetailEvents();
                })
        }
             connection.on("TableStatusUpdated", function(tableId) {
                console.log(`Masa ${tableId} durumu güncellendi`);
                // Sayfayı yenile
                setTimeout(function() {
                    location.reload();
                }, 1000);
            });
            // Sipariş durumu değişikliğini dinle
            connection.on("OrderStatusUpdated", function(orderId, status) {
                console.log(`Sipariş #${orderId} durumu güncellendi: ${status}`);
                // Eğer ilgili sipariş sayfasındaysanız sayfayı yenileyin
                const currentOrderId = document.querySelector('meta[name="order-id"]')?.content;
                if (currentOrderId && parseInt(currentOrderId) === orderId) {
                    location.reload();
                }

            });
        });
    </script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>